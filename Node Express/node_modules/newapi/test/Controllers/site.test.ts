import {APIProviderASync, APIProviderSync} from "../../src/APIProvider";
import SiteCreateDescriptor from "../../src/SiteAtomic/ValueObjects/Site/SiteCreateDescriptor";
import Site from "../../src/SiteAtomic/Objects/Site/Site";


describe('Tests for the site service', function () {

    let provider = new APIProviderSync(<string>process.env.SITE_ATOMIC_ENDPOINT, "TESTAPIKEY", "TESTAPISECRET");

    it('Can list all sites in my account', function () {

        let accounts = provider.site().list();

        expect(accounts.length).toEqual(3);

        expect(accounts[0].siteKey).toEqual("pingu");
        expect(accounts[0].title).toEqual("Pingu Graphics");

        expect(accounts[1].siteKey).toEqual("samdavisdotcom");
        expect(accounts[1].title).toEqual("Sam Davis Design .COM");

        expect(accounts[2].siteKey).toEqual("woollenmill");
        expect(accounts[2].title).toEqual("Woollen Mill Site");

    });


    it('Can get a site in my account', function () {

        let site = provider.site().get("pingu");
        expect(site.title).toEqual("Pingu Graphics");

        try {
            site = provider.site().get("imaginary");
            fail("Should have thrown here");
        } catch (e) {
            // Success
        }
    });


    it('Can check if a site key is available', function () {
        expect(provider.site().siteKeyAvailable("bonzosupermeddler")).toEqual(true);
        expect(provider.site().siteKeyAvailable("woollenmill")).toEqual(false);
        expect(provider.site().siteKeyAvailable("Sam Smith")).toEqual(false);
    });

    it('Can suggest a site key', function () {
        expect(provider.site().siteKeySuggest("Big Fat Tummy Whale")).toEqual("bigfattummywhale");
        expect(provider.site().siteKeySuggest("Pingu")).toEqual("pingu2");
    });


    it('Can create a new site', function () {

        let provider = new APIProviderSync(<string>process.env.SITE_ATOMIC_ENDPOINT, "TESTAPIKEY3", "TESTAPISECRET3");

        const siteCreateDescriptor = new SiteCreateDescriptor("Joan of Arc");

        const createdSite = provider.site().create(siteCreateDescriptor);

        expect(createdSite instanceof Site).toEqual(true);


    });


});

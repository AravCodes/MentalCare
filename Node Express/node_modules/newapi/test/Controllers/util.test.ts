import {APIProviderASync, APIProviderSync} from "../../src/APIProvider";

describe('Tests for the utility service', function () {

    it('Bad credentials throw an exception using synchronous API.', function () {
        let provider = new APIProviderSync(<string>process.env.SITE_ATOMIC_ENDPOINT, "BADKEY", "TESTAPISECRET");

        try {
            provider.util().ping();
            fail("Should have failed here");
        } catch (e) {
            // Success
        }

    });


    it('Can ping the service using using synchronous API.', function () {

        let provider = new APIProviderSync(<string>process.env.SITE_ATOMIC_ENDPOINT, "TESTAPIKEY", "TESTAPISECRET");

        expect(provider.util().ping()).toEqual('OK');
    });


    it('Bad credentials throw an exception using asynchronous API.', function (done) {
        let provider = new APIProviderASync(<string>process.env.SITE_ATOMIC_ENDPOINT, "BADKEY", "TESTAPISECRET");

        provider.util().ping().catch((message) => {
            expect(message).toBeDefined();
            done();
        });


    });


    it('Can ping the service using asynchronous API.', function (done) {

        let provider = new APIProviderASync(<string>process.env.SITE_ATOMIC_ENDPOINT, "TESTAPIKEY", "TESTAPISECRET");

        provider.util().ping().then((result: string) => {
            expect(result).toEqual("OK");
            done();
        });
    });


});

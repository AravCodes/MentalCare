/**
 * Site API.
*/

import WebServiceProxy from "./../Framework/WebServiceProxy";

import Site from "../SiteAtomic/Objects/Site/Site";
import SiteCreateDescriptor from "../SiteAtomic/ValueObjects/Site/SiteCreateDescriptor";

export class siteSync extends WebServiceProxy {

    /**
     * List sites.  The account id can be supplied optionally if this is for
     * a sub account.
     *
     * @param accountId
     * @return Site[]
     */
    public list(accountId?:number):Site[]{
        return this.callMethod("", "GET", { "accountId" : accountId },null,Site);
    }

    /**
     * Get a site by key
     *
     * @param siteKey
     * @return Site
     */
    public get(siteKey:string):Site{
        return this.callMethod("" + siteKey + "", "GET", {  },null,Site);
    }

    /**
     * Return a boolean indicating whether or not the proposed site key is available.
     *
     * @param proposedSiteKey
     * @return boolean
     */
    public siteKeyAvailable(proposedSiteKey:string):boolean{
        return this.callMethod("siteKey/available/" + proposedSiteKey + "", "GET", {  },null,"boolean");
    }

    /**
     * Sugget a site key based upon a title.
     *
     * @param title
     * @return string
     */
    public siteKeySuggest(title:string):string{
        return this.callMethod("siteKey/suggest/" + title + "", "GET", {  },null,"string");
    }

    /**
     * Create a new site, passing a create descriptor.  An account id may be passed
     * if this create is for a sub account under your management.
     *
     * @param siteCreateDescriptor
     * @param accountId
     * @return Site
     */
    public create(siteCreateDescriptor:SiteCreateDescriptor, accountId?:number):Site{
        return this.callMethod("", "POST", { "accountId" : accountId },siteCreateDescriptor,Site);
    }


}


export class siteASync extends WebServiceProxy {

    /**
     * List sites.  The account id can be supplied optionally if this is for
     * a sub account.
     *
     * @param accountId
     * @return Site[]
     */
    public list(accountId?:number):Promise<Site[]>{
        return this.callMethod("", "GET", { "accountId" : accountId },null,Site);
    }

    /**
     * Get a site by key
     *
     * @param siteKey
     * @return Site
     */
    public get(siteKey:string):Promise<Site>{
        return this.callMethod("" + siteKey + "", "GET", {  },null,Site);
    }

    /**
     * Return a boolean indicating whether or not the proposed site key is available.
     *
     * @param proposedSiteKey
     * @return boolean
     */
    public siteKeyAvailable(proposedSiteKey:string):Promise<boolean>{
        return this.callMethod("siteKey/available/" + proposedSiteKey + "", "GET", {  },null,"boolean");
    }

    /**
     * Sugget a site key based upon a title.
     *
     * @param title
     * @return string
     */
    public siteKeySuggest(title:string):Promise<string>{
        return this.callMethod("siteKey/suggest/" + title + "", "GET", {  },null,"string");
    }

    /**
     * Create a new site, passing a create descriptor.  An account id may be passed
     * if this create is for a sub account under your management.
     *
     * @param siteCreateDescriptor
     * @param accountId
     * @return Site
     */
    public create(siteCreateDescriptor:SiteCreateDescriptor, accountId?:number):Promise<Site>{
        return this.callMethod("", "POST", { "accountId" : accountId },siteCreateDescriptor,Site);
    }


}





/**
* Main api provider
*/
import { accountSync, accountASync } from "./Controllers/account";

import { utilSync, utilASync } from "./Controllers/util";

import { siteSync, siteASync } from "./Controllers/site";


/**
* Synchronous version of the API
*/
export class APIProviderSync  {

    private _apiURL:string = "";
    private _globalParameters:any;
    private _instances: any = {};

    /**
    * Construct with the api url and the api key for access.  In javascript we also allow a synchronous flag to
    * be passed to allow for synchronous or asynchronous calling of the api depending upon the application flow required.
    *
    * @param apiURL
    * @param apiKey
    * @param apiSecret
    */
    constructor(apiURL:string, apiKey:any, apiSecret:any){
        this._apiURL = apiURL;

        this._globalParameters = {};
        this._globalParameters["apiKey"] = apiKey;
        this._globalParameters["apiSecret"] = apiSecret;

    }

    /**
    * Get an instance of the  API
    *
    * @return account
    */
    public account():accountSync{
        if (!this._instances["account"]){
            this._instances["account"] = new accountSync(this._apiURL + "/api/account", this._globalParameters, true);
        }
        return this._instances["account"];
    }

    /**
    * Get an instance of the  API
    *
    * @return util
    */
    public util():utilSync{
        if (!this._instances["util"]){
            this._instances["util"] = new utilSync(this._apiURL + "/api/util", this._globalParameters, true);
        }
        return this._instances["util"];
    }

    /**
    * Get an instance of the  API
    *
    * @return site
    */
    public site():siteSync{
        if (!this._instances["site"]){
            this._instances["site"] = new siteSync(this._apiURL + "/api/site", this._globalParameters, true);
        }
        return this._instances["site"];
    }



}

/**
* Asynchronous version of the API.
*/
export class APIProviderASync  {

    private _apiURL:string = "";
    private _globalParameters:any;
    private _instances: any = {};

    /**
    * Construct with the api url and the api key for access.  In javascript we also allow a synchronous flag to
    * be passed to allow for synchronous or asynchronous calling of the api depending upon the application flow required.
    *
    * @param apiURL
    * @param apiKey
    * @param apiSecret
    */
    constructor(apiURL:string, apiKey:any, apiSecret:any){
        this._apiURL = apiURL;

        this._globalParameters = {};
        this._globalParameters["apiKey"] = apiKey;
        this._globalParameters["apiSecret"] = apiSecret;

    }

    /**
    * Get an instance of the  API
    *
    * @return account
    */
    public account():accountASync{
        if (!this._instances["account"]){
            this._instances["account"] = new accountASync(this._apiURL + "/api/account", this._globalParameters, false);
        }
        return this._instances["account"];
    }

    /**
    * Get an instance of the  API
    *
    * @return util
    */
    public util():utilASync{
        if (!this._instances["util"]){
            this._instances["util"] = new utilASync(this._apiURL + "/api/util", this._globalParameters, false);
        }
        return this._instances["util"];
    }

    /**
    * Get an instance of the  API
    *
    * @return site
    */
    public site():siteASync{
        if (!this._instances["site"]){
            this._instances["site"] = new siteASync(this._apiURL + "/api/site", this._globalParameters, false);
        }
        return this._instances["site"];
    }



}
